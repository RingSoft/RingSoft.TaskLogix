// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RingSoft.TaskLogix.SqlServer;

#nullable disable

namespace RingSoft.TaskLogix.SqlServer.Migrations
{
    [DbContext(typeof(TaskLogixSqlServerDbContext))]
    partial class TaskLogixSqlServerDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RingSoft.CustomTemplate.Library.SystemMaster", b =>
                {
                    b.Property<string>("MasterName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("AppGuid")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("MasterName");

                    b.ToTable("SystemMaster");
                });

            modelBuilder.Entity("RingSoft.DbLookup.AdvancedFind.AdvancedFind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("Disabled")
                        .HasColumnType("bit");

                    b.Property<string>("FromFormula")
                        .HasColumnType("ntext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("RedAlert")
                        .HasColumnType("integer");

                    b.Property<byte?>("RefreshCondition")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("RefreshRate")
                        .HasColumnType("tinyint");

                    b.Property<int?>("RefreshValue")
                        .HasColumnType("integer");

                    b.Property<string>("Table")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<int?>("YellowAlert")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("AdvancedFinds");
                });

            modelBuilder.Entity("RingSoft.DbLookup.AdvancedFind.AdvancedFindColumn", b =>
                {
                    b.Property<int>("AdvancedFindId")
                        .HasColumnType("integer");

                    b.Property<int>("ColumnId")
                        .HasColumnType("integer");

                    b.Property<string>("Caption")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar");

                    b.Property<byte>("DecimalFormatType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("FieldDataType")
                        .HasColumnType("tinyint");

                    b.Property<string>("FieldName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Formula")
                        .HasColumnType("ntext");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar");

                    b.Property<decimal>("PercentWidth")
                        .HasColumnType("numeric");

                    b.Property<string>("PrimaryFieldName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PrimaryTableName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("AdvancedFindId", "ColumnId");

                    b.ToTable("AdvancedFindColumns");
                });

            modelBuilder.Entity("RingSoft.DbLookup.AdvancedFind.AdvancedFindFilter", b =>
                {
                    b.Property<int>("AdvancedFindId")
                        .HasColumnType("integer");

                    b.Property<int>("FilterId")
                        .HasColumnType("integer");

                    b.Property<bool>("CustomDate")
                        .HasColumnType("bit");

                    b.Property<byte>("DateFilterType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("EndLogic")
                        .HasColumnType("tinyint");

                    b.Property<string>("FieldName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("Formula")
                        .HasColumnType("ntext");

                    b.Property<byte>("FormulaDataType")
                        .HasColumnType("tinyint");

                    b.Property<string>("FormulaDisplayValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<byte>("LeftParentheses")
                        .HasColumnType("tinyint");

                    b.Property<byte>("Operand")
                        .HasColumnType("tinyint");

                    b.Property<string>("Path")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PrimaryFieldName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PrimaryTableName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<byte>("RightParentheses")
                        .HasColumnType("tinyint");

                    b.Property<int?>("SearchForAdvancedFindId")
                        .HasColumnType("integer");

                    b.Property<string>("SearchForValue")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("TableName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("AdvancedFindId", "FilterId");

                    b.HasIndex("SearchForAdvancedFindId");

                    b.ToTable("AdvancedFindFilters");
                });

            modelBuilder.Entity("RingSoft.DbLookup.RecordLocking.RecordLock", b =>
                {
                    b.Property<string>("Table")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<string>("PrimaryKey")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.Property<DateTime>("LockDateTime")
                        .HasColumnType("datetime");

                    b.Property<string>("User")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Table", "PrimaryKey");

                    b.ToTable("RecordLocks");
                });

            modelBuilder.Entity("RingSoft.TaskLogix.DataAccess.Model.TlTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("EndAfterOccurrences")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDismissed")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasColumnType("ntext");

                    b.Property<decimal>("PercentComplete")
                        .HasColumnType("numeric");

                    b.Property<byte>("PriorityType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("RecurEndDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("RecurEndType")
                        .HasColumnType("tinyint");

                    b.Property<byte>("RecurType")
                        .HasColumnType("tinyint");

                    b.Property<DateTime?>("ReminderDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SnoozeDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<byte>("StatusType")
                        .HasColumnType("tinyint");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar");

                    b.HasKey("Id");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("RingSoft.TaskLogix.DataAccess.Model.TlTaskHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime");

                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskHistory");
                });

            modelBuilder.Entity("RingSoft.TaskLogix.DataAccess.Model.TlTaskRecurDaily", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<int?>("RecurDays")
                        .HasColumnType("integer");

                    b.Property<byte>("RecurType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("RegenDaysAfterCompleted")
                        .HasColumnType("integer");

                    b.HasKey("TaskId");

                    b.ToTable("TaskRecurDailys");
                });

            modelBuilder.Entity("RingSoft.TaskLogix.DataAccess.Model.TlTaskRecurMonthly", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<byte?>("DayType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("DayXOfEvery")
                        .HasColumnType("integer");

                    b.Property<int?>("OfEveryWeekTypeMonths")
                        .HasColumnType("integer");

                    b.Property<int?>("OfEveryYMonths")
                        .HasColumnType("integer");

                    b.Property<byte>("RecurType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("RegenMonthsAfterCompleted")
                        .HasColumnType("integer");

                    b.Property<byte?>("WeekType")
                        .HasColumnType("tinyint");

                    b.HasKey("TaskId");

                    b.ToTable("TaskRecurMonthlys");
                });

            modelBuilder.Entity("RingSoft.TaskLogix.DataAccess.Model.TlTaskRecurWeekly", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<bool?>("Friday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Monday")
                        .HasColumnType("bit");

                    b.Property<byte>("RecurType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("RecurWeeks")
                        .HasColumnType("integer");

                    b.Property<int?>("RegenWeeksAfterCompleted")
                        .HasColumnType("integer");

                    b.Property<bool?>("Saturday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Sunday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Thursday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Tuesday")
                        .HasColumnType("bit");

                    b.Property<bool?>("Wednesday")
                        .HasColumnType("bit");

                    b.HasKey("TaskId");

                    b.ToTable("TaskRecurWeeklys");
                });

            modelBuilder.Entity("RingSoft.TaskLogix.DataAccess.Model.TlTaskRecurYearly", b =>
                {
                    b.Property<int>("TaskId")
                        .HasColumnType("integer");

                    b.Property<byte?>("DayType")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("EveryMonthType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("MonthDay")
                        .HasColumnType("integer");

                    b.Property<byte>("RecurType")
                        .HasColumnType("tinyint");

                    b.Property<int?>("RegenYearsAfterCompleted")
                        .HasColumnType("integer");

                    b.Property<byte?>("WeekMonthType")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("WeekType")
                        .HasColumnType("tinyint");

                    b.HasKey("TaskId");

                    b.ToTable("TaskRecurYearlys");
                });

            modelBuilder.Entity("RingSoft.DbLookup.AdvancedFind.AdvancedFindColumn", b =>
                {
                    b.HasOne("RingSoft.DbLookup.AdvancedFind.AdvancedFind", "AdvancedFind")
                        .WithMany("Columns")
                        .HasForeignKey("AdvancedFindId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvancedFind");
                });

            modelBuilder.Entity("RingSoft.DbLookup.AdvancedFind.AdvancedFindFilter", b =>
                {
                    b.HasOne("RingSoft.DbLookup.AdvancedFind.AdvancedFind", "AdvancedFind")
                        .WithMany("Filters")
                        .HasForeignKey("AdvancedFindId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("RingSoft.DbLookup.AdvancedFind.AdvancedFind", "SearchForAdvancedFind")
                        .WithMany("SearchForAdvancedFindFilters")
                        .HasForeignKey("SearchForAdvancedFindId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("AdvancedFind");

                    b.Navigation("SearchForAdvancedFind");
                });

            modelBuilder.Entity("RingSoft.TaskLogix.DataAccess.Model.TlTaskHistory", b =>
                {
                    b.HasOne("RingSoft.TaskLogix.DataAccess.Model.TlTask", "Task")
                        .WithMany("History")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("RingSoft.TaskLogix.DataAccess.Model.TlTaskRecurDaily", b =>
                {
                    b.HasOne("RingSoft.TaskLogix.DataAccess.Model.TlTask", "Task")
                        .WithMany("RecurDaily")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("RingSoft.TaskLogix.DataAccess.Model.TlTaskRecurMonthly", b =>
                {
                    b.HasOne("RingSoft.TaskLogix.DataAccess.Model.TlTask", "Task")
                        .WithMany("RecurMonthly")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("RingSoft.TaskLogix.DataAccess.Model.TlTaskRecurWeekly", b =>
                {
                    b.HasOne("RingSoft.TaskLogix.DataAccess.Model.TlTask", "Task")
                        .WithMany("RecurWeekly")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("RingSoft.TaskLogix.DataAccess.Model.TlTaskRecurYearly", b =>
                {
                    b.HasOne("RingSoft.TaskLogix.DataAccess.Model.TlTask", "Task")
                        .WithMany("RecurYearly")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("RingSoft.DbLookup.AdvancedFind.AdvancedFind", b =>
                {
                    b.Navigation("Columns");

                    b.Navigation("Filters");

                    b.Navigation("SearchForAdvancedFindFilters");
                });

            modelBuilder.Entity("RingSoft.TaskLogix.DataAccess.Model.TlTask", b =>
                {
                    b.Navigation("History");

                    b.Navigation("RecurDaily");

                    b.Navigation("RecurMonthly");

                    b.Navigation("RecurWeekly");

                    b.Navigation("RecurYearly");
                });
#pragma warning restore 612, 618
        }
    }
}
